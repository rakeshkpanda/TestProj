{"version":3,"sources":["App.js","serviceWorker.js","About.js","Contact.js","ListForm.js","index.js"],"names":["App","React","Component","Boolean","window","location","hostname","match","About","props","state","data","updateState","bind","this","setState","onClick","Contact","hello","changeState","console","log","newProps","newState","nextProps","nextState","prevProps","prevState","ListForm","handleEvent","className","type","name","id","value","for","routing","to","exact","activeStyle","color","activeStyel","path","component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gQAYeA,E,iLATX,OACC,6BACG,8C,GAJUC,IAAMC,WCWJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WCQSC,E,YArBf,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAEDC,MAAQ,CACVC,KAAM,mBAET,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBANF,E,2EASjBC,KAAKC,SAAS,CAACJ,KAAM,sB,+BAGrB,OACG,6BACG,4BAAQK,QAAWF,KAAKF,aAAxB,SACA,4BAAKE,KAAKJ,MAAMC,W,GAnBJV,IAAMC,WCyCXe,E,YAxCZ,WAAYR,GAAQ,IAAD,8BAChB,4CAAMA,KACDC,MAAQ,CAACQ,MAAO,cACrB,EAAKC,YAAc,EAAKA,YAAYN,KAAjB,gBAHH,E,sEAMhB,OACG,6BACI,6DACA,qCAAWC,KAAKJ,MAAMQ,OACtB,4BAAQF,QAAWF,KAAKK,aAAxB,kB,2CAKPC,QAAQC,IAAI,2B,0CAGZD,QAAQC,IAAI,0B,oCAGZP,KAAKC,SAAS,CAACG,MAAM,2C,gDAEEI,GACvBF,QAAQC,IAAI,mC,4CAEOC,EAAUC,GAC7B,OAAO,I,0CAEUC,EAAWC,GAC5BL,QAAQC,IAAI,4B,yCAEIK,EAAWC,GAC3BP,QAAQC,IAAI,2B,6CAGZD,QAAQC,IAAI,+B,GArCIpB,IAAMC,WCsCb0B,E,YApCX,WAAYnB,GAAO,IAAD,8BACV,4CAAMA,KACDC,MAAQ,CACRC,KAAM,sBAEX,EAAKkB,YAAc,EAAKA,YAAYhB,KAAjB,gBALT,E,2EAQVO,QAAQC,IAAIP,KAAKL,S,+BAGlB,OACC,yBAAKqB,UAAU,YAWzB,2BAAOC,KAAK,QAAQC,KAAK,SAASC,GAAG,OAAOC,MAAM,SAClD,2BAAOC,IAAI,QAAX,QAA8B,6BAC9B,2BAAOJ,KAAK,QAAQC,KAAK,SAASC,GAAG,SAASC,MAAM,WACpD,2BAAOC,IAAI,UAAX,UAAkC,6BAClC,2BAAOJ,KAAK,QAAQC,KAAK,SAASC,GAAG,QAAQC,MAAM,UACnD,2BAAOC,IAAI,SAAX,SACA,6BACA,2BAAOJ,KAAK,SAASG,MAAM,gB,GAhCNjC,IAAMC,W,gBCmBvBkC,EACF,kBAAC,IAAD,KACI,6BACE,iDACA,4BACE,4BAEE,kBAAC,IAAD,CAASC,GAAG,IAAIC,OAAK,EAACC,YACvB,CAACC,MAAM,QADN,SAKF,4BAEE,kBAAC,IAAD,CAASH,GAAG,SAASC,OAAK,EAACC,YAC5B,CAACC,MAAM,UADN,UAIF,4BAEE,kBAAC,IAAD,CAASH,GAAG,WAAWC,OAAK,EAACC,YAC9B,CAACC,MAAM,YADN,YAIF,4BACE,kBAAC,IAAD,CAASH,GAAG,YAAYC,OAAK,EAACG,YAAa,CAACD,MAAM,SAAlD,cAGJ,gCACA,kBAAC,IAAD,CAAOF,OAAK,EAACI,KAAK,IAAIC,UAAW3C,IACjC,kBAAC,IAAD,CAAO0C,KAAK,SAASC,UAAWnC,IAChC,kBAAC,IAAD,CAAOkC,KAAK,WAAWC,UAAW1B,IAClC,kBAAC,IAAD,CAAOyB,KAAK,YAAYC,UAAWf,OAS7CgB,IAASC,OAAOT,EAASU,SAASC,eAAe,SJoE3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.e105bf4f.chunk.js","sourcesContent":["import React from 'react'  \nclass App extends React.Component { \n      render() {  \n    return (  \n     <div>  \n        <h1>Home Page</h1> \n     \n      </div>  \n\n    )  \n  }  \n}  \nexport default App  \n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'  \r\nclass About extends React.Component {  \r\n// render() {  \r\n//  return <h1>About</h1>  \r\n//   }  \r\nconstructor(props) {\r\n  super(props);\r\n  \r\n  this.state = {\r\n     data: 'Initial data...'\r\n  }\r\n  this.updateState = this.updateState.bind(this);\r\n};\r\nupdateState() {\r\n  this.setState({data: 'Data updated...'})\r\n}\r\nrender() {\r\n  return (\r\n     <div>\r\n        <button onClick = {this.updateState}>CLICK</button>\r\n        <h4>{this.state.data}</h4>\r\n     </div>\r\n  );\r\n}\r\n\r\n}  \r\nexport default About  \r\n","import React from 'react'  \r\nclass Contact extends React.Component {  \r\n   constructor(props) {  \r\n      super(props);  \r\n      this.state = {hello: \"JavaTpoint\"};  \r\n      this.changeState = this.changeState.bind(this)  \r\n   }    \r\n   render() {  \r\n      return (  \r\n         <div>  \r\n             <h1>ReactJS component's Lifecycle</h1>  \r\n             <h3>Hello {this.state.hello}</h3>  \r\n             <button onClick = {this.changeState}>Click Here!</button>          \r\n         </div>  \r\n      );  \r\n   }  \r\n   componentWillMount() {  \r\n      console.log('Component Will MOUNT!')  \r\n   }  \r\n   componentDidMount() {  \r\n      console.log('Component Did MOUNT!')  \r\n   }  \r\n   changeState(){  \r\n      this.setState({hello:\"All!!- Its a great reactjs tutorial.\"});  \r\n   }  \r\n   componentWillReceiveProps(newProps) {      \r\n      console.log('Component Will Recieve Props!')  \r\n   }  \r\n   shouldComponentUpdate(newProps, newState) {  \r\n      return true;  \r\n   }  \r\n   componentWillUpdate(nextProps, nextState) {  \r\n      console.log('Component Will UPDATE!');  \r\n   }  \r\n   componentDidUpdate(prevProps, prevState) {  \r\n      console.log('Component Did UPDATE!')  \r\n   }  \r\n   componentWillUnmount() {  \r\n      console.log('Component Will UNMOUNT!')  \r\n   } \r\n\r\n}  \r\nexport default Contact  \r\n","import React from 'react';     \r\nclass ListForm extends React.Component {\r\n\r\n    constructor(props){  \r\n            super(props);  \r\n            this.state = {  \r\n                 data: 'www.javatpoint.com'  \r\n              }  \r\n            this.handleEvent = this.handleEvent.bind(this);  \r\n          }  \r\n          handleEvent(){  \r\n            console.log(this.props);  \r\n          }  \r\n          render() {  \r\n           return (  \r\n            <div className=\"ListForm\">  \r\n            {/* <label for=\"lblusername\">User Name: </label>\r\n            <input type=\"label\" ></input>\r\n            <br></br>\r\n            <br></br>\r\n            <label for=\"lblpassword\">Password: </label>\r\n             <input type=\"label\" ></input> \r\n            <br></br>\r\n            \r\n            <button onClick={this.handleEvent}>Submit</button>  */}\r\n           \r\n  <input type=\"radio\" name=\"gender\" id=\"male\" value=\"male\"/>          \r\n  <label for=\"male\">Male</label><br></br>\r\n  <input type=\"radio\" name=\"gender\" id=\"female\" value=\"female\"/>\r\n  <label for=\"female\">Female</label><br></br>\r\n  <input type=\"radio\" name=\"gender\" id=\"other\" value=\"other\"/>\r\n  <label for=\"other\">Other</label>\r\n  <br></br>\r\n  <input type=\"submit\" value=\"Submit\"/>\r\n  </div>  \r\n            );  \r\n          }  \r\n         \r\n        }   \r\nexport default ListForm;  \r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport About from './About' ; \nimport Contact from './Contact'  ;\nimport Nofound from './nofound';\nimport ListForm from './ListForm'  ;  \nimport { Route, Link, BrowserRouter as Router,NavLink } from 'react-router-dom' ; \n// const routing = (  \n//      <Router>  \n//         <div>  \n//           <h1>React Router Example</h1>  \n//           <Route path=\"/\" component={App} />  \n//           {/* <Route path=\"/about\" component={About} />  \n//           <Route path=\"/contact\" component={Contact} />   */}\n//         </div>  \n//       </Router>  \n//     )  \nconst routing = (  \n    <Router>  \n        <div>  \n          <h1>React Application</h1>  \n          <ul>  \n            <li>  \n              {/* <Link to=\"/\">Home</Link>   */}\n              <NavLink to=\"/\" exact activeStyle={  \n             {color:'red'}  \n          }>Home</NavLink> \n\n            </li>  \n            <li>  \n              {/* <Link to=\"/about\">About</Link>   */}\n              <NavLink to=\"/about\" exact activeStyle={  \n             {color:'green'}  \n          }>About</NavLink> \n           </li>  \n            <li>  \n              {/* <Link to=\"/contact\">Contact</Link>   */}\n              <NavLink to=\"/contact\" exact activeStyle={  \n             {color:'magenta'}  \n          }>Contact</NavLink> \n            </li>  \n            <li>\n              <NavLink to=\"/listForm\" exact activeStyel={{color:'blue'}}>ListForm</NavLink>\n            </li>\n          </ul> \n          <switch> \n          <Route exact path=\"/\" component={App} />  \n          <Route path=\"/about\" component={About} />  \n          <Route path=\"/contact\" component={Contact} />\n          <Route path=\"/listForm\" component={ListForm} />\n          {/* <Route component={Nofound} />     */}\n          </switch>\n        </div>  \n      </Router>  \n    \n)\n\n//ReactDOM.render(<App />, document.getElementById('root'));\nReactDOM.render(routing, document.getElementById('root'));  \n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}